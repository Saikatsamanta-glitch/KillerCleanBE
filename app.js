require("dotenv").config();
const express = require("express");
const app = express();
const cors = require("cors");
const stripe = require("stripe")(process.env.STRIPE_SK);
const port = 7000 || process.env.PORT;
app.use(express.json());
app.use(cors());
app.get('/',(req,res)=>{
        res.json({"message":"pong.."})
})
app.post("/api/create-checkout-session", async (req, res) => {
        const products = req.body;
        
        const lineItems = products.map((product) => ({
                price_data: {
                        currency: process.env.currency,
                        product_data: {
                               name:"static",
                               description:"description",
                        },
                        unit_amount: product.price * 100,
                },
                quantity: "1"
        }));
        // console.log(lineItems);
        const session = await stripe.checkout.sessions.create({
                payment_method_types: ["card"],
                line_items: lineItems,
                mode: "payment",
                success_url: process.env.success_url,
                cancel_url: process.env.cancel_url,
        });

        res.json({ id: session.id })

})

app.listen(port, () => {
        console.log(`Connected to port : ${port} ðŸŒŸ`)
})

// payment | user details | product detail | time 

// shut down server
const shutdown = () => {
  server.close((err) => {
    if (err) {
      // eslint-disable-next-line no-console
      console.error(err);
      process.exitCode = 1;
    }
    process.exit();
  });
};

// This signal interrupts a process immediately.
// The default action of this signal is to terminate a process gracefully .
// It can be handled , ignored or caught.
// It can be sent from a terminal as input characters.
// This signal is generated when a user presses Ctrl+C.
process.on('SIGINT', () => {
  // eslint-disable-next-line no-console
  console.info('Got SIGINT (aka ctrl-c in docker). Graceful shutdown ', new Date().toISOString());
  shutdown();
});

// This signal terminates a process immediately.
// This can also be handled ,ignored.
// This is also used for graceful termination of a process.
// The only difference is that It is generated by shell command kill by default.
process.on('SIGTERM', () => {
  // eslint-disable-next-line no-console
  console.info('Got SIGTERM (docker container stop). Graceful shutdown ', new Date().toISOString());
  shutdown();
});
